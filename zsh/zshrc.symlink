zmodload zsh/zprof

#############################
### General configuration ###
#############################

setopt no_beep
setopt interactive_comments
setopt prompt_subst
setopt auto_cd
setopt auto_pushd
setopt pushd_ignore_dups
setopt pushd_minus
setopt pushd_silent
setopt append_history
setopt inc_append_history
setopt extended_history
setopt hist_expire_dups_first
setopt hist_ignore_all_dups
setopt hist_ignore_dups
setopt hist_ignore_space
setopt share_history
setopt hup
setopt long_list_jobs
setopt notify
unsetopt nomatch

# Initialize Powerlevel10k instant prompt for faster startup
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  typeset -g POWERLEVEL9K_INSTANT_PROMPT=quiet
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Cache directory setup
ZSH_CACHE_DIR="${ZSH_CACHE_DIR:-$HOME/.cache/zsh}"
mkdir -p "$ZSH_CACHE_DIR"
ZSH_COMPDUMP="$ZSH_CACHE_DIR/.zcompdump-$SHORT_HOST-$ZSH_VERSION"

# Skip global compinit - we'll handle it ourselves
skip_global_compinit=1
zstyle ':completion:*' rehash true
zstyle ':completion:*' menu select
zstyle ':completion:*:default' list-colors ''
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' completer _complete _approximate
zstyle ':completion:*:approximate:*' max-errors 1 numeric
zstyle -e ':completion:*:approximate:*' max-errors 'reply=($((($#PREFIX+$#SUFFIX)/3))numeric)'
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'

##############################
### FAST compinit settings ###
##############################

# 1. 快速同步 compinit 讓 plugins 不卡
autoload -Uz compinit
compinit -C -d "${ZSH_COMPDUMP}"

# 2. 背景重新整理 compdump
#
#
_load_completions_async() {
  {
    autoload -Uz compinit
    setopt localoptions extendedglob

    if [[ -f "${ZSH_COMPDUMP}" && $(find "${ZSH_COMPDUMP}" -mtime +7 2>/dev/null) ]]; then
      compinit -d "${ZSH_COMPDUMP}"
    else
      compinit -C -d "${ZSH_COMPDUMP}"
    fi

    if [[ -s "${ZSH_COMPDUMP}" && (! -s "${ZSH_COMPDUMP}.zwc" || "${ZSH_COMPDUMP}" -nt "${ZSH_COMPDUMP}.zwc") ]]; then
      zcompile "${ZSH_COMPDUMP}"
    fi
  } >/dev/null 2>&1 &|
}
_load_completions_async

##############################
### Oh-My-Zsh and Plugins ###
##############################

# Basic zsh settings
setopt no_nomatch
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Oh-My-Zsh configuration
export ZSH="$HOME/.oh-my-zsh"
ulimit -n 4096
DISABLE_AUTO_UPDATE="true"
DISABLE_MAGIC_FUNCTIONS="true"
ZSH_THEME="powerlevel10k/powerlevel10k"
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=30'

# Plugin loading
EAGER_PLUGINS=(
  colored-man-pages
  copyfile
  git
  gitignore
  jsontools
  man
  sudo
  web-search
  zsh-lazyload
  fast-syntax-highlighting
  pnpm
)

PROMPT_PLUGINS=(
  zsh-autosuggestions
)

KEYPRESS_PLUGINS=(
  zsh-vi-mode
  fzf-tab
  zsh-autopair
)

DELAYED_PLUGINS=(
  fast-syntax-highlighting
)

# Set plugins for oh-my-zsh
plugins=("${EAGER_PLUGINS[@]}")

ZSH_WEB_SEARCH_ENGINES=(
  anna "https://tw.annas-archive.org/search?index=&ext=epub&sort=newest&q="
  pubmed "https://pubmed-ncbi-nlm-nih-gov.autorpa.kfsyscc.org/?sort=date&term="
  cco "https://clinicaloptions.com/CE-CME?specialities=hematology,oncology&contenttypes=pdf,slideset,slideset-download,text-module&searchtext="
  scihub "https://sci-hub.tw/"
  search-uptodate "https://www-uptodate-com.autorpa.kfsyscc.org/contents/search?search="
  zlib "https://zh.singlelogin.re/s/"
  google-pdf "https://www.google.com/search?q=filetype%3Apdf+"
)

# Load oh-my-zsh
source "$ZSH/oh-my-zsh.sh"

##############################
### Plugin Lazy Loading    ###
##############################

# Function to find plugin paths
_find_plugin_path() {
  local plugin=$1
  local plugin_paths=(
    "$ZSH/custom/plugins/$plugin/$plugin.plugin.zsh"
    "$ZSH/custom/plugins/$plugin/${plugin}.zsh"
    "$ZSH/plugins/$plugin/$plugin.plugin.zsh"
  )

  for path in "${plugin_paths[@]}"; do
    if [[ -f "$path" ]]; then
      echo "$path"
      return 0
    fi
  done
  return 1
}

# Prompt-based loading
_load_prompt_plugins() {
  _load_prompt_plugins() { :; }
  for plugin in "${PROMPT_PLUGINS[@]}"; do
    local plugin_path=$(_find_plugin_path "$plugin")
    [[ -n "$plugin_path" ]] && source "$plugin_path"
  done
}
autoload -Uz add-zsh-hook
add-zsh-hook precmd _load_prompt_plugins

# Keypress-based loading
_load_keypress_plugins() {
  zle -D zle-line-init
  for plugin in "${KEYPRESS_PLUGINS[@]}"; do
    local plugin_path=$(_find_plugin_path "$plugin")
    [[ -n "$plugin_path" ]] && source "$plugin_path"
  done
}
zle -N zle-line-init _load_keypress_plugins


# Fix line refresh
_load_completions() {
  _load_completions() { :; }
  zle -R
}
add-zsh-hook precmd _load_completions

##############################
### Extra Configs          ###
##############################

# API files
[ -d ~/API ] && for file in ~/API/*; do
  [ -f "$file" ] && source "$file"
done

if [ -f /Users/htlin/.config/op/plugins.sh ]; then
  source /Users/htlin/.config/op/plugins.sh
fi

# Key bindings
bindkey -s '^o' 'ya\n'
bindkey -s '^n' 'tmux new-window\n'

# Source modules
source "$DOTFILES/zsh/modules/alias.zsh"
source "$DOTFILES/zsh/modules/functions.zsh"
source "$DOTFILES/zsh/modules/fzf.zsh"
source "$DOTFILES/zsh/modules/snippets.zsh"
source "$HOME/.uvv"

# Lazy load external tools
_load_fnm() {
  if [ -d "$FNM_PATH" ]; then
    export PATH="/Users/mac/Library/Application Support/fnm:$PATH"
    eval "$(fnm env)"
  fi
}
_load_broot() {
  if [ -f /Users/htlin/.config/broot/launcher/bash/br ]; then
    source /Users/htlin/.config/broot/launcher/bash/br
  fi
}

FNM_PATH="/Users/mac/Library/Application Support/fnm"
lazyload fnm node npm -- _load_fnm
lazyload br -- _load_broot

# Paths
export PATH="/Users/htlin/.codeium/windsurf/bin:$PATH"
export PATH="$PATH:/Users/htlin/.cache/lm-studio/bin"
export PNPM_HOME="/Users/htlin/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac

# Forgit
export PATH="$PATH:$(brew --prefix)/share/forgit"
[ -f $HOMEBREW_PREFIX/share/forgit/forgit.plugin.zsh ] && source $HOMEBREW_PREFIX/share/forgit/forgit.plugin.zsh

# Atuin
if [ -f "$HOME/.atuin/bin/env" ]; then
  . "$HOME/.atuin/bin/env"
  eval "$(atuin init zsh)"
else
  echo "Warning: Atuin environment file not found at $HOME/.atuin/bin/env"
fi

# Python venv
if [ -f ".venv/bin/activate" ]; then
  source .venv/bin/activate
  screen -dm bash -c 'osascript -e "display notification \"uv .venv is activated ✨\" with title \"Python Venv\"" >/dev/null 2>&1'
fi

# Debug Zprof
if [ -n "${ZSH_DEBUGRC+1}" ]; then
  zprof
fi

# Auto-Tmux (WezTerm)
if [[ "$TERM_PROGRAM" == "WezTerm" && -z "$TMUX" && -x "$(command -v tmux)" ]]; then
  exec tmux
fi
